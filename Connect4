 /* 
 *                  Connect4.c
 *                        by Kourtnie Jenkins
 * 
 *          Program simulates the game Connect Four.
 */

#include <stdio.h>
#include <stdlib.h>

void populateBoard(int board[6][7], int value);
void drawBoard(int board[6][7]);
void playerMove(int board[6][7], int player);
int chechMove(int board[6][7], int choice);
int boardFull(int board[6][7]);
void updateBoard(int board[6][7], int choice, int player);
void checkWin(int board[6][7], int player);
int checkVert(int board[6][7], int player);
int checkHoriz(int board[6][7], int player);
int checkDiag(int board[6][7], int player);



int main(void) {
    
    enum gamePiece {EMPTY, RED, BLACK}; //Just for readability.    
    int board[6][7], moves = 0;
    
    populateBoard(board, EMPTY);
   
    printf("Welcome to Connect 4");
        
    do{     
        printf("\nPlayer 1's turn.\n");
        drawBoard(board);
        playerMove(board, RED);
        checkWin(board, RED);
                        
        printf("\nPlayer 2's turn.\n");
        drawBoard(board);
        playerMove(board, BLACK);
        checkWin(board, BLACK);
        
        moves++;

    } while (moves < 21); //Failsafe. Will terminate loop after 42/2 moves.
    return (0);
} //End main()

//Function: Populates game board with default value.
void populateBoard(int board[6][7], int value){
    int i, j;
    for (i = 0; i < 6; i++) {
        for (j = 0; j < 7; j++) {        
                board[i][j] = value;
        }
    }
} //End populateBoard()

//Function: Prints game board.
void drawBoard(int board[6][7]) {
    int i, j;
    printf("  1 2 3 4 5 6 7\n");
    for (i = 0; i < 6; i++) {
        printf(" |");
        for (j = 0; j < 7; j++) { 
            if(board[i][j] == 0){
                printf(" |");
            }else if(board[i][j] == 1){
                printf("X|");
            }else if(board[i][j] == 2){
                printf("O|");
            }else if(board[i][j] == 3){
                printf("4|");
            }
        }
        printf("\n");
    }    
    printf(" ---------------");
} //End drawBoard()

//Function: Retrieves and evaluates player's choice.
void playerMove(int board[6][7], int player){
    int input;
    if (player == 1) {
        do {
            printf("\nIn which column would you like to place your piece(X)?\n");
            scanf("%d", &input);
        } while (chechMove(board, input) == 1);        
        
        updateBoard(board,input, player);
        
    }else if(player == 2) {
        do {
            printf("\nIn which column would you like to place your piece(O)?\n");
            scanf("%d", &input);
        } while (chechMove(board, input) == 1);
        
        
        updateBoard(board, input, player);
    }
    
    // Checks if board if full after player move.
        if(boardFull(board) == 1){
            drawBoard(board);
            printf("\n\nAll spots taken!");
            exit(0);
        }
    
}

//Function: Checks if user chooses a full column or a column out of bounds.
int chechMove(int board[6][7], int choice) {
    if (choice > 7) {
        printf("\nInvalid Column");
        return 1;
    } else if (board[0][choice - 1] == 1 || board[0][choice - 1] == 2) {
        printf("\nColumn Full");
        return 1;
    }
}

//Function: Checks if entire board is full.
int boardFull(int board[6][7]){
    int i, cnt =0;
    for (i = 0; i < 7; i++) {
        if (board[0][i] != 0) {           
            cnt++;
        }
    }
    
    if(cnt == 7){
        return 1;
    }else{
        return 0;
    }
} //End checkFilled)()

//Function: Updates game board with user move.
void updateBoard(int board[6][7], int choice, int player) {
    int i, j;
    for (i = 5; i >= 0; i--) {
        if (player == 1) {
            if (board[i][choice - 1] == 0) {
                board[i][choice - 1] = 1;
                return;
            }
        } else {
            if (board[i][choice - 1] == 0) {
                board[i][choice - 1] = 2;
                return;
            }
        }
    }
} //End updateBoard()

//Function: Checks if game board contains a winning sequence. 
void checkWin(int board[6][7], int player) {

    if (checkVert(board, player) == 1) {
        drawBoard(board);
        printf("\nCongratulations player %d, you won.\n", player);
        exit(0);
        
    } else if (checkHoriz(board, player) == 1) {
        drawBoard(board);
        printf("\nCongratulations player %d, you won.\n", player);
        exit(0);
    } else if (checkDiag(board, player) == 1) {
        drawBoard(board);
        printf("\nCongratulations player %d, you won.\n", player);
        exit(0);
    } else {
        //return 0;
    }
} //End checkWin()

//Function: Checks board for four vertically connected corresponding values.
int checkVert(int board[6][7], int player) {
    int i, j;
        for (i = 0; i < 3; i++) {
            for (j = 0; j < 7; j++) {
                if (board[i][j] == player &&
                        board[i + 1][j] == player &&
                        board[i + 2][j] == player &&
                        board[i + 3][j] == player) {
                    board[i][j] = 3;
                    board[i + 1][j] = 3;
                    board[i + 2][j] = 3;
                    board[i + 3][j] = 3;

                    return 1;
                }
            }
        }
    return 0;
} //End checkVert()

//Function: Checks board for four horizontally connected corresponding values.
int checkHoriz(int board[6][7], int player) {
    int i, j;

    for (i = 0; i < 6; i++) {
        for (j = 0; j < 4; j++) {
            if (board[i][j] == player &&
                    board[i][j + 1] == player &&
                    board[i][j + 2] == player &&
                    board[i][j + 3] == player) {
                board[i][j] = 3;
                board[i][j + 1] = 3;
                board[i][j + 2] = 3;
                board[i][j + 3] = 3;

                return 1;
            }
        }
    }
    return 0;
} //End checkHoriz()

//Function: Checks board for four diagonally connecting corresponding values.
int checkDiag(int board[6][7], int player) {
    int i, j;
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 4; j++) {

            if (board[i][j] == player &&
                    board[i + 1][j + 1] == player &&
                    board[i + 2][j + 2] == player &&
                    board[i + 3][j + 3] == player) {
                
                board[i][j] = 3;
                board[i + 1][j + 1] = 3;
                board[i + 2][j + 2] = 3;
                board[i + 3][j + 3] = 3;
                
                return 1;
            }
        }
    }
    
    for (i = 5; i > 3; i--) {
        for (j = 0; j < 4; j++) {
            
            if (board[i][j] == player &&
                    board[i - 1][j + 1] == player &&
                    board[i - 2][j + 2] == player &&
                    board[i - 3][j + 3] == player) {
                
                board[i][j] = 3;
                board[i - 1][j + 1] = 3;
                board[i - 2][j + 2] = 3;
                board[i - 3][j + 3] = 3;
                
                return 1;
            }
        }
    }
    
    return 0;
} //End checkDiag()

